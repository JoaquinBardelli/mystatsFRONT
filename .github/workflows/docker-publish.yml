name: CI/CD with Docker

on:
  pull_request:
    branches:
      - main  # Rama en la que se ejecutará el flujo de trabajo

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      # Paso 1: Clonar el repositorio
      - name: Checkout repository
        uses: actions/checkout@v4

      # Paso 2: Configurar Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Paso 3: Iniciar sesión en Docker Hub (si usas Docker Hub en lugar de GitHub Container Registry)
      - name: Log into Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Paso 4: Extraer metadata del Dockerfile
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Paso 5: Instalar dependencias (si aplica para un proyecto con Node.js u otro)
      - name: Install dependencies
        run: npm ci  # Si es una app React u otro proyecto que requiera Node.js

      # Paso 6: Construir y probar la imagen Docker (sin subirla aún)
      - name: Build Docker image (test)
        id: build-and-test
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          push: false  # No sube la imagen aún
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test

      # Paso 7: Si los tests pasan, construir y subir la imagen final para producción
      - name: Build and push Docker image for production
        if: success()  # Solo si los tests pasaron
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          push: true  # Esto subirá la imagen a Docker Hub o GitHub Container Registry
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      # Paso 8: (Opcional) Firmar la imagen Docker publicada
      - name: Sign the published Docker image
        env:
          TAGS: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        run: |
          echo "Signing the Docker image..."
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
